/**
 *  Complete Project Dependencies Are Defined Here
 */
ext {
    // Application Package Name
    APPLICATION_PACKAGE = 'app_package'
    APPLICATION_PACKAGE_NAME = 'com.heady.test'
    // Minimum SDK Required For Application
    MIN_SDK = 21 // Lollipop
    // Targeted SDK Required For Application
    TARGET_SDK = 29 // Q
    // Build Tools Version
    BUILD_TOOLS_VERSION = '29.0.2'
    // Constants For Version Keys
    VERSION_FILE_PATH = 'buildsystem/version.properties'
    VERSION_MAJOR = 'VERSION_MAJOR'
    VERSION_MINOR = 'VERSION_MINOR'
    VERSION_PATCH = 'VERSION_PATCH'
    VERSION_BUILD = 'VERSION_BUILD'
    // Constants For Signing Keys
    SIGNING_FILE_PATH = 'buildsystem/signing.properties'
    STORE_FILE_PATH_KEY = 'STORE_FILE_PATH'
    STORE_PASSWORD_KEY = 'STORE_PASSWORD'
    KEY_ALIAS_KEY = 'KEY_ALIAS'
    KEY_PASSWORD_KEY = 'KEY_PASSWORD'

    // File Path Of Version Properties File
    def versionPropertiesFile = project.rootProject.file(VERSION_FILE_PATH)
    // File Path Of Signing Properties File
    def signingPropertiesFile = project.rootProject.file(SIGNING_FILE_PATH)
    // To Check If File Is Readable
    if (versionPropertiesFile.canRead() && signingPropertiesFile.canRead()) {
        // Initialize Version Properties
        Properties versionProperties = new Properties()
        // Load Version Properties Value
        versionProperties.load(new FileInputStream(versionPropertiesFile))
        def VERSION_MAJOR_INTEGER = versionProperties[VERSION_MAJOR].toInteger()
        def VERSION_MINOR_INTEGER = versionProperties[VERSION_MINOR].toInteger()
        def VERSION_PATCH_INTEGER = versionProperties[VERSION_PATCH].toInteger()
        // Increment Build Version By 1
        def VERSION_BUILD_INTEGER = versionProperties[VERSION_BUILD].toInteger() + 1
        // Save Incremented Build Version To Properties
        versionProperties[VERSION_BUILD] = VERSION_BUILD_INTEGER.toString()
        // Save Incremented Build Version To File
        versionProperties.store(versionPropertiesFile.newWriter(), " suppress inspection \"UnusedProperty\" for whole file")
        /**
         *  Dynamically Generated Version Code & Name To Be Used In Application.
         *  Each Build Is Incremental To Previous Build.
         */
        // Calculate Version Code
        VERSION_CODE = VERSION_MAJOR_INTEGER * 10000 + VERSION_MINOR_INTEGER * 1000 + VERSION_PATCH_INTEGER * 100 + VERSION_BUILD_INTEGER
        // Calculate Version Name
        VERSION_NAME = "${VERSION_MAJOR_INTEGER}.${VERSION_MINOR_INTEGER}.${VERSION_PATCH_INTEGER}.${VERSION_BUILD_INTEGER}"

        // Initialize Signing Properties
        Properties signingProperties = new Properties()
        // Load Signing Properties Value
        signingProperties.load(new FileInputStream(signingPropertiesFile))
        // Signing JKS File Path
        STORE_FILE_PATH = signingProperties[STORE_FILE_PATH_KEY]
        // Signing Password
        STORE_PASSWORD = signingProperties[STORE_PASSWORD_KEY]
        // Signing Key Alias
        KEY_ALIAS = signingProperties[KEY_ALIAS_KEY]
        // Signing Key Password
        KEY_PASSWORD = signingProperties[KEY_PASSWORD_KEY]
    } else {
        // File Not Found
        throw new FileNotFoundException("Unable to read versioning file")
    }
    // Android Test Runner
    ANDROID_JUNIT_RUNNER = 'androidx.test.runner.AndroidJUnitRunner'
    // Pro-Guard File For Android
    PROGUARD_ANDROID_OPTIMIZE = 'proguard-android-optimize.txt'
    PROGUARD_RULES = 'proguard-rules.pro'

    // Flavour Dimensions
    APPLICATION_DIMENSIONS = 'version'
    // Flavour
    SANDBOX_ID_SUFFIX = '.sandbox'
    SANDBOX_NAME_SUFFIX = '_sandbox'
    UAT_ID_SUFFIX = '.uat'
    UAT_NAME_SUFFIX = '_uat'

    TRUST_STORE_PASSWORD_FIELD_TYPE = 'String'
    TRUST_STORE_PASSWORD_KEY = 'TRUST_STORE_PASSWORD'
    TRUST_STORE_PASSWORD = '\"Heady@1243\"'

    // URL For Different Flavour
    BASE_URL_FIELD_TYPE = 'String'
    BASE_URL_FIELD_KEY = 'BASE_URL'
    BASE_URL_VALUE_SANDBOX = '\"https://stark-spire-93433.herokuapp.com/\"'
    BASE_URL_VALUE_UAT = '\"https://stark-spire-93433.herokuapp.com/\"'
    BASE_URL_VALUE_PRODUCTION = '\"https://stark-spire-93433.herokuapp.com/\"'

    // Database Password Of Realm
    DATABASE_FIELD_TYPE = 'String'
    DATABASE_PASSWORD_KEY = 'DATABASE_PASSWORD'
    DATABASE_PASSWORD = '\"ENCRYPTED_DATABASE_PASSWORD\"'

    // Database Password Of Realm
    APPLICATION_SIGNATURE_FIELD_TYPE = 'String'
    APPLICATION_SIGNATURE_KEY = 'APPLICATION_SIGNATURE'
    APPLICATION_SIGNATURE = '\"9pmyrxnWUviZmHMhhNFECRW7p4c=\"'

    // Project Dependencies Versions
    appSecVersion = '5.2.2'
    // OWASP dependency-check disclosed vulnerabilities contained within project dependencies.
    fabricVersion = '1.31.0'
    // Android Library Which Is Lightweight & Powerful For Crash Reporting.
    firebasePluginVersion = '2.0.0'
    // Android Library Which Helps Mobile Application Team Succeed.
    googleServicesVersion = '4.3.0'     // Library To Use Google Services In Application
    gradleVersion = '3.5.3'             // Gradle Library
    kotlinVersion = '1.3.61'            // Kotlin Library
    realmGradlePluginVersion = '6.0.1'  // Local Database Gradle Plugin


    // Module Dependencies Versions
    // Library For Compatibility With Older OS.
    appCompatVersion = '1.1.0'
    // ConstraintLayout for Android.
    constraintLayoutVersion = '1.1.3'
    // A Set Of Kotlin Extensions For Android.
    coreKTXVersion = '1.1.0'
    // Firebase Crashlytics Library For Crash Reporting.
    crashlyticsVersion = '2.10.1'
    // Dagger 2 Library By Google. (A Fast Dependency Injector For Android & Java.).
    daggerVersion = '2.25.4'
    // Firebase Core Library By Google For FCM, Crashlytics, Analytics, Performance Tuning, etc..
    firebaseCoreVersion = '17.2.1'
    // Firebase Database Library For Cloud Storage Of JSON Structured Data.
    firebaseDatabaseVersion = '19.2.0'
    // Firebase Instance ID For Getting Unique Identifier Of Application.
    firebaseIIDVersion = '19.0.1'
    // The Firebase JobDispatcher Provides Interface To Scheduling Jobs.
    firebaseJobDispatcherVersion = '0.8.6'
    // Firebase Messaging Library For Notification Handling.
    firebaseMessagingVersion = '20.1.0'
    // Firebase Performance Monitoring Library For Performance Tracking Of Application.
    firebasePerformanceVersion = '18.0.1'
    // Gson Library By Google Convert Data Objects Into Their JSON Representation.
    gsonVersion = '2.8.6'
    // An android Library that provides sdp based on the dp size of screen.
    intuitSDPVersion = '1.0.6'
    // An android Library that provides ssp based on the sp size of screen.
    intuitSSPVersion = '1.0.6'
    // Dependency Injection Library By Annotations.
    javaXVersion = '1'
    // Library For Compatibility With Older OS.
    legacySupportVersion = '1.0.0'
    // Lottie is an animation library that renders Adobe After Effects animations natively in realtime.
    lottieVersion = '3.3.1'
    // Library By Google For Implementations Of The Material Design Specification.
    materialVersion = '1.2.0-alpha03'
    // Library For Multi-dex Support.
    multiDexVersion = '2.0.1'
    // Android Single Activity Navigation Support.
    navigationVersion = '2.1.0'
    // OkHttp3 Library Used For Web API Call In Retrofit
    okHttp3Version = '4.3.0'
    // An OkHttp Interceptor Which Logs HTTP Request & Response Data.
    okHttp3LoggingInterceptorVersion = '4.3.0'
    // Java IO Library For Supporting Retrofit Functionality.
    okioVersion = '2.4.3'
    // A Type-Safe HTTP Client For Android.
    retrofit2Version = '2.7.1'
    // Android Library Of An API For Asynchronous Programming With Observable Streams.
    rxAndroidVersion = '2.1.1'
    // Java Library Of An API For Asynchronous Programming With Observable Streams.
    rxJavaVersion = '2.2.16'
    // Kotlin Library Of An API For Asynchronous Programming With Observable Streams.
    rxKotlinVersion = '2.4.0'
    // Tejora Utility Library For Android.
    tejoraUtilsVersion = '1.0.41'
    // The WorkManager API makes it easy to schedule deferrable, asynchronous tasks that must be run reliably .
    workManagerVersion = '2.2.0'


    // Module Test Dependencies Versions
    // JUnit Is A Unit Testing Framework Library For Java.
    androidXJunitVersion = '1.1.1'
    // The AndroidX Test Library Provides An Extensive Framework For Testing Android Application.
    espressoVersion = '3.2.0'
    // Mockito Mock Objects Library Core API & Implementation.
    mockitoVersion = '3.2.4'
    // The AndroidX Test Library Provides An Extensive Framework For Testing Android Application.
    runnerVersion = '1.2.0'


    // Development Dependencies Version
    leakcanaryVersion = '2.1' // Library For Leak Detection In Android Application.

    /**
     * Presentation Dependencies
     */
    // Project Level Dependencies
    projectDependencies = [
            appSec            : "org.owasp:dependency-check-gradle:${appSecVersion}",
            fabricGradleTools : "io.fabric.tools:gradle:${fabricVersion}",
            firebasePlugin    : "com.google.firebase:firebase-plugins:${firebasePluginVersion}",
            googleServices    : "com.google.gms:google-services:${googleServicesVersion}",
            gradleBuildTools  : "com.android.tools.build:gradle:${gradleVersion}",
            kotlinGradlePlugin: "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}",
            navigationSafeArgs: "androidx.navigation:navigation-safe-args-gradle-plugin:${navigationVersion}",
            realm             : "io.realm:realm-gradle-plugin:${realmGradlePluginVersion}",
    ]

    // Module Level Dependencies Used For Debugging
    moduleDebugDependencies = [
            leakCanary: "com.squareup.leakcanary:leakcanary-android:${leakcanaryVersion}",
    ]

    // Module Level Dependencies
    moduleDependencies = [
            appCompat                : "androidx.appcompat:appcompat:${appCompatVersion}",
            constraintLayout         : "androidx.constraintlayout:constraintlayout:${constraintLayoutVersion}",
            coreKTX                  : "androidx.core:core-ktx:${coreKTXVersion}",
            crashlytics              : "com.crashlytics.sdk.android:crashlytics:${crashlyticsVersion}",
            dagger                   : "com.google.dagger:dagger:${daggerVersion}",
            daggerAndroidProcessor   : "com.google.dagger:dagger-android-processor:${daggerVersion}",
            daggerAndroidSupport     : "com.google.dagger:dagger-android-support:${daggerVersion}",
            daggerCompiler           : "com.google.dagger:dagger-compiler:${daggerVersion}",
            firebaseCore             : "com.google.firebase:firebase-core:${firebaseCoreVersion}",
            firebaseDatabase         : "com.google.firebase:firebase-database:${firebaseDatabaseVersion}",
            firebaseIID              : "com.google.firebase:firebase-iid:${firebaseIIDVersion}",
            firebaseJobDispatcher    : "com.firebase:firebase-jobdispatcher:${firebaseJobDispatcherVersion}",
            firebaseMessaging        : "com.google.firebase:firebase-messaging:${firebaseMessagingVersion}",
            firebasePerformance      : "com.google.firebase:firebase-perf:${firebasePerformanceVersion}",
            gson                     : "com.google.code.gson:gson:${gsonVersion}",
            intuitSDP                : "com.intuit.sdp:sdp-android:${intuitSDPVersion}",
            intuitSSP                : "com.intuit.ssp:ssp-android:${intuitSSPVersion}",
            javaX                    : "javax.inject:javax.inject:${javaXVersion}",
            kotlin                   : "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}",
            legacySupport            : "androidx.legacy:legacy-support-v4:${legacySupportVersion}",
            lottie                   : "com.airbnb.android:lottie:${lottieVersion}",
            material                 : "com.google.android.material:material:${materialVersion}",
            multiDex                 : "androidx.multidex:multidex:${multiDexVersion}",
            navigationFragment       : "androidx.navigation:navigation-fragment-ktx:${navigationVersion}",
            navigationUI             : "androidx.navigation:navigation-ui-ktx:${navigationVersion}",
            okHttp3                  : "com.squareup.okhttp3:okhttp:${okHttp3Version}",
            okHttp3LoggingInterceptor: "com.squareup.okhttp3:logging-interceptor:${okHttp3LoggingInterceptorVersion}",
            okio                     : "com.squareup.okio:okio:${okioVersion}",
            retrofit2                : "com.squareup.retrofit2:retrofit:${retrofit2Version}",
            retrofit2Converter       : "com.squareup.retrofit2:converter-gson:${retrofit2Version}",
            retrofit2RxJavaAdapter   : "com.squareup.retrofit2:adapter-rxjava2:${retrofit2Version}",
            rxAndroid                : "io.reactivex.rxjava2:rxandroid:${rxAndroidVersion}",
            rxJava                   : "io.reactivex.rxjava2:rxjava:${rxJavaVersion}",
            rxKotlin                 : "io.reactivex.rxjava2:rxkotlin:${rxKotlinVersion}",
            tejoraUtils              : "com.tejora:utils:${tejoraUtilsVersion}",
            workManager              : "androidx.work:work-runtime-ktx:${workManagerVersion}",
    ]

    // Module Level Dependencies For Testing
    moduleTestDependencies = [
            junit   : "androidx.test.ext:junit:${androidXJunitVersion}",
            espresso: "androidx.test.espresso:espresso-core:${espressoVersion}",
            mockito : "org.mockito:mockito-core:${mockitoVersion}",
            runner  : "androidx.test:runner:${runnerVersion}",
    ]
}